
DROP TABLE IF EXISTS `CLIENTE`;

-- Active: 1708886282770@@127.0.0.1@3306@rinha-2024
CREATE TABLE IF NOT EXISTS `CLIENTE` (
  `ID_CLIENTE` int NOT NULL,
  `NR_LIMITE` int DEFAULT NULL,
  `NR_SALDO` int DEFAULT NULL,
  PRIMARY KEY (`ID_CLIENTE`),
  KEY `NR_LIMITE` (`NR_LIMITE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

DROP TABLE IF EXISTS `TRANSACAO`;

-- Active: 1708886282770@@127.0.0.1@3306@rinha-2024
CREATE TABLE `TRANSACAO` (
  `ID_TRANSACAO` int NOT NULL AUTO_INCREMENT,
  `ID_CLIENTE` int DEFAULT NULL,
  `NR_VALOR` int DEFAULT NULL,
  `CD_TYPE` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `DS_TRANSACAO` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `DT_REALIZADO` timestamp(5) NULL DEFAULT NULL,
  PRIMARY KEY (`ID_TRANSACAO`),
  KEY `ID_CLIENTE` (`ID_CLIENTE`),
  KEY `DT_REALIZADO` (`DT_REALIZADO`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Active: 1708886282770@@127.0.0.1@3306@rinha-2024
DROP VIEW IF EXISTS TRANSACAO_VW;

CREATE ALGORITHM = UNDEFINED DEFINER = `root` @`%` SQL SECURITY DEFINER VIEW `TRANSACAO_VW` AS
select
    `A`.`NR_LIMITE` AS `NR_LIMITE`,
    `A`.`ID_CLIENTE` AS `ID_CLIENTE`,
    `A`.`NR_SALDO` AS `NR_SALDO`,
    `B`.`NR_VALOR` AS `NR_VALOR`,
    `B`.`CD_TYPE` AS `CD_TYPE`,
    `B`.`DS_TRANSACAO` AS `DS_TRANSACAO`,
    `B`.`DT_REALIZADO` AS `DT_REALIZADO`,
    date_format(
        `B`.`DT_REALIZADO`, '%Y-%m-%dT%H:%i:%s.%fZ'
    ) AS `DT_REALIZADO_FORMATTED`
from (
        `CLIENTE` `A`
        join `TRANSACAO` `B` on (
            (
                `B`.`ID_CLIENTE` = `A`.`ID_CLIENTE`
            )
        )
    );

-- Active: 1708886282770@@127.0.0.1@3306@rinha-2024
TRUNCATE TABLE CLIENTE;

TRUNCATE TABLE TRANSACAO;

INSERT INTO CLIENTE (`ID_CLIENTE`, `NR_SALDO`, `NR_LIMITE`) VALUES (1, 0, -100000);
INSERT INTO CLIENTE (`ID_CLIENTE`, `NR_SALDO`, `NR_LIMITE`) VALUES (2, 0, -80000);
INSERT INTO CLIENTE (`ID_CLIENTE`, `NR_SALDO`, `NR_LIMITE`) VALUES (3, 0, -1000000);
INSERT INTO CLIENTE (`ID_CLIENTE`, `NR_SALDO`, `NR_LIMITE`) VALUES (4, 0, -10000000);
INSERT INTO CLIENTE (`ID_CLIENTE`, `NR_SALDO`, `NR_LIMITE`) VALUES (5, 0, -500000);


INSERT INTO `TRANSACAO` (`ID_CLIENTE`, `NR_VALOR`, `CD_TYPE`, `DS_TRANSACAO`, `DT_REALIZADO`) VALUES (1, 0, 'S', 'SYSTEM', NOW(5));
INSERT INTO `TRANSACAO` (`ID_CLIENTE`, `NR_VALOR`, `CD_TYPE`, `DS_TRANSACAO`, `DT_REALIZADO`) VALUES (2, 0, 'S', 'SYSTEM', NOW(5));
INSERT INTO `TRANSACAO` (`ID_CLIENTE`, `NR_VALOR`, `CD_TYPE`, `DS_TRANSACAO`, `DT_REALIZADO`) VALUES (3, 0, 'S', 'SYSTEM', NOW(5));
INSERT INTO `TRANSACAO` (`ID_CLIENTE`, `NR_VALOR`, `CD_TYPE`, `DS_TRANSACAO`, `DT_REALIZADO`) VALUES (4, 0, 'S', 'SYSTEM', NOW(5));
INSERT INTO `TRANSACAO` (`ID_CLIENTE`, `NR_VALOR`, `CD_TYPE`, `DS_TRANSACAO`, `DT_REALIZADO`) VALUES (5, 0, 'S', 'SYSTEM', NOW(5));


-- Active: 1708886282770@@127.0.0.1@3306@rinha-2024
DROP PROCEDURE CRIAR_TRANSACAO;
CREATE DEFINER=`root`@`%` PROCEDURE `CRIAR_TRANSACAO`(
    IN P_ID_CLIENTE         INT
    , IN P_NR_VALUE         INT
    , IN P_CD_TYPE          VARCHAR(1)
    , IN P_DS_TRANSACAO     VARCHAR(100)
    , OUT P_OUT_RESULT      INT
    , OUT P_OUT_LIMITE      INT
    , OUT P_OUT_SALDO       INT
)
BEGIN

    DECLARE VAR_ID_CLIENTE    INT DEFAULT(0);
    DECLARE VAR_NR_LIMITE     INT DEFAULT(0);
    DECLARE VAR_NR_SALDO      INT DEFAULT(0);

    SET P_OUT_RESULT = 0;
    SET P_OUT_LIMITE = 0;
    SET P_OUT_SALDO = 0;

    UPDATE CLIENTE
    SET NR_SALDO = @VAR_NR_SALDO := NR_SALDO + P_NR_VALUE
        , ID_CLIENTE = (SELECT @VAR_ID_CLIENTE := ID_CLIENTE)
        , NR_LIMITE = (SELECT @VAR_NR_LIMITE := NR_LIMITE)
    WHERE ID_CLIENTE = P_ID_CLIENTE
    AND NR_LIMITE <= (NR_SALDO + P_NR_VALUE)
    LIMIT 1;

    IF @VAR_ID_CLIENTE > 0 THEN
        INSERT INTO TRANSACAO (ID_CLIENTE, NR_VALOR, CD_TYPE, DS_TRANSACAO, DT_REALIZADO)
        VALUES
        (
            P_ID_CLIENTE,
            P_NR_VALUE,
            P_CD_TYPE,
            P_DS_TRANSACAO,
            NOW(5)
        );

        SET P_OUT_RESULT = 1;
        SET P_OUT_SALDO = @VAR_NR_SALDO;
        SET P_OUT_LIMITE = ABS(@VAR_NR_LIMITE);
    END IF;
END;